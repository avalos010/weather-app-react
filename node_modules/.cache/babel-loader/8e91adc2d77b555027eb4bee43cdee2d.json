{"ast":null,"code":"import _slicedToArray from \"/home/jluis/Documents/weather-app-react/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/jluis/Documents/weather-app-react/src/components/CurrentWeather.js\";\nimport React, { useState, useEffect } from 'react';\n\nfunction CurrentWeather(props) {\n  var _this = this;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      title = _useState2[0],\n      setTitle = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      temp = _useState4[0],\n      setTemp = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      description = _useState6[0],\n      setDescription = _useState6[1];\n\n  var _useState7 = useState(null),\n      _useState8 = _slicedToArray(_useState7, 2),\n      thumbnail = _useState8[0],\n      setThumbnail = _useState8[1];\n\n  var _useState9 = useState(null),\n      _useState10 = _slicedToArray(_useState9, 2),\n      lat = _useState10[0],\n      setLat = _useState10[1];\n\n  var _useState11 = useState(null),\n      _useState12 = _slicedToArray(_useState11, 2),\n      lon = _useState12[0],\n      setLon = _useState12[1];\n\n  useEffect(function () {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(handleLocationSuccess, _this.handleLocatioError);\n    }\n\n    console.log(props);\n  });\n\n  var handleLocationSuccess = function handleLocationSuccess(position) {\n    var _position$coords = position.coords,\n        latitude = _position$coords.latitude,\n        longitude = _position$coords.longitude;\n    setLat(latitude);\n    setLon(longitude);\n\n    _this.getWeather();\n  };\n\n  var handleLocatioError = function handleLocatioError() {\n    alert('Please allow location');\n  };\n\n  var getWeather = function getWeather() {\n    var url = \"https://api.openweathermap.org/data/2.5/weather?lat=\".concat(lat, \"&lon=\").concat(lon, \"&appid=601eae66287223be5956bb277ffa86d5&units=imperial\");\n    var promiseResponse = fetch(url).then(function (response) {\n      return response.json();\n    });\n    return promiseResponse.then(function (result) {\n      setTitle(result.name);\n      setThumbnail(result.weather[0].icon);\n      setDescription(result.weather[0].description);\n      setTemp(Math.floor(result.main.temp));\n    });\n  };\n\n  return React.createElement(\"div\", {\n    className: \"jumbotron\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    className: \"display-4 mt-3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, \"Current Weather\"), React.createElement(\"div\", {\n    className: \"card\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"lead font-weight-bold\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, title), React.createElement(\"img\", {\n    style: {\n      width: 100\n    },\n    src: \"http://openweathermap.org/img/w/\".concat(thumbnail, \".png\"),\n    className: \"mx-auto card-img-top\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"card-body\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"card-text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, description))));\n}\n\nexport default CurrentWeather;","map":{"version":3,"sources":["/home/jluis/Documents/weather-app-react/src/components/CurrentWeather.js"],"names":["React","useState","useEffect","CurrentWeather","props","title","setTitle","temp","setTemp","description","setDescription","thumbnail","setThumbnail","lat","setLat","lon","setLon","navigator","geolocation","getCurrentPosition","handleLocationSuccess","handleLocatioError","console","log","position","coords","latitude","longitude","getWeather","alert","url","promiseResponse","fetch","then","response","json","result","name","weather","icon","Math","floor","main","width"],"mappings":"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","sourcesContent":["import React,{useState, useEffect} from 'react';\n\n\n\nfunction CurrentWeather(props) {\n  let [title, setTitle] = useState(null);\n  let [temp, setTemp] = useState(null);\n  let [description, setDescription] = useState(null);\n  let [thumbnail,setThumbnail] = useState(null);\n  let [lat, setLat] = useState(null);\n  let [lon, setLon] = useState(null);\n\n    useEffect(() => {\n      if(navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(handleLocationSuccess, this.handleLocatioError)\n      }\n\n      console.log(props)\n    });\n\n\n    const handleLocationSuccess = (position) => {\n      const {latitude, longitude} = position.coords;\n      setLat(latitude);\n      setLon(longitude)\n\n      this.getWeather()\n    };\n\n    const handleLocatioError = () => {\n      alert('Please allow location')\n    };\n\n    const getWeather = () => {\n        let url = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=601eae66287223be5956bb277ffa86d5&units=imperial`;\n        let promiseResponse = fetch(url).then(response => response.json());\n        return promiseResponse.then(result => {\n\n            setTitle(result.name);\n            setThumbnail(result.weather[0].icon);\n            setDescription(result.weather[0].description);\n            setTemp(Math.floor(result.main.temp));\n\n        });\n      };\n\n  return (<div className=\"jumbotron\">\n    <h2 className=\"display-4 mt-3\">Current Weather</h2>\n\n    <div className=\"card\">\n    <p className=\"lead font-weight-bold\">{title}</p>\n  <img style={{width: 100}} src={`http://openweathermap.org/img/w/${thumbnail}.png`} className=\"mx-auto card-img-top\" />\n  <div className=\"card-body\">\n    <p className=\"card-text\">{description}</p>\n  </div>\n</div>\n  </div>\n  )\n}\n\nexport default CurrentWeather;\n"]},"metadata":{},"sourceType":"module"}